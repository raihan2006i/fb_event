require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # Registration. As you add validations to Registration, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RegistrationsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before(:each) do
    @user = Factory(:confirmed_user)
    sign_in @user
  end

  describe "GET show" do
    it "assigns the requested user as @user" do
      get :show, {:id => @user.to_param}
      assigns(:user).should eq(@user)
    end
  end

  describe "GET profile" do
    it "assigns the requested user can view his/her profile" do
      get :profile, {:id => @user.to_param}
      assigns(:user).should eq(@user)
    end
  end

  describe "PUT update_profile" do
    describe "with valid params" do
      it "updates the requested user profile" do
        put :update_profile, {:id => @user.to_param, :profile => {:about_me => "three words about", :display_name => "test_name"}}
        response.should redirect_to( profile_user_path(@user))
      end

      it "current_user can't edit other user profile" do
        @other_user = Factory(:confirmed_user)
        put :update_profile, {:id => @other_user.to_param, :profile => {:about_me => "three words about", :display_name => "test_name"}}
        response.should redirect_to(profile_user_path(@user))
      end

      it "redirects to the user profile" do
        put :update_profile, {:id => @user.to_param, :profile => {:about_me => "three words about", :display_name => "test_name"}}
        response.should redirect_to(profile_user_path(@user))
      end
    end

    describe "with invalid params" do
      it "failed to update requested attribute" do
        # Trigger the behavior that occurs when invalid params are submitted
        put :update_profile, {:id => @user.to_param, :profile => {:about_me => "", :display_name => ""}}
        response.should render_template("edit_profile")
      end
    end
  end

  describe "GET edit_profile" do
    it "assigns the requested user can edit his/her profile" do
      get :edit_profile, {:id => @user.to_param}
      assigns(:can_access).should eq(true)
    end

    it "assigns the requested user can edit his/her profile" do
      get :edit_profile, {:id => @user.to_param}
      assigns(:can_access).should eq(true)
      response.should render_template("edit_profile")
    end

    it "current_user can't edit  profile if he/she is not owner of that profile" do
      other_user = Factory(:confirmed_user)
      get :edit_profile, {:id => other_user.to_param}
      assigns(:can_access).should eq(false)
      response.should redirect_to(profile_user_path(@user))
    end
  end

end
